{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { Controller, useForm } from 'react-hook-form';\nimport TextInput from \"../components/InputHook\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginActions } from \"../store/UserSlice\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { TextInput as Input, Title } from 'react-native-paper';\nimport Checkbox from 'expo-checkbox';\nimport { useStyles } from \"../styles/responsiveStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PasswordScreen = function PasswordScreen(_ref) {\n  var navigation = _ref.navigation;\n  var styles = useStyles();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isChecked = _useState2[0],\n    setChecked = _useState2[1];\n  var dispatch = useDispatch();\n  var logindata = useSelector(function (state) {\n    return state.userData.user;\n  });\n  var isLoggedIn = useSelector(function (state) {\n    return state.userData.isLoggedIn;\n  });\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    login = _useState4[0],\n    setLogin = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    passwordVisible = _useState6[0],\n    setPasswordVisible = _useState6[1];\n  useEffect(function () {\n    if (isLoggedIn == true) {\n      navigation.reset({\n        index: 0,\n        routes: [{\n          name: 'HomeScreen'\n        }]\n      });\n      setLogin(true);\n    }\n    ;\n  }, [login]);\n  var _useForm = useForm({\n      defaultValues: {\n        password: ''\n      }\n    }),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    reset = _useForm.reset,\n    errors = _useForm.formState.errors;\n  var onSubmit = function onSubmit(data) {\n    {\n      logindata.map(function (item) {\n        console.log(\"data.email\", item.email, item.password);\n        if (data.password == item.password) {\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: 'HomeScreen'\n            }]\n          });\n        }\n      });\n    }\n    dispatch(loginActions.loginform({\n      isLoggedIn: true\n    }));\n    reset();\n  };\n  return _jsx(View, {\n    style: styles.rootContainter,\n    children: _jsx(ImageBackground, {\n      source: require(\"../../assets/images/login-bg.jpg\"),\n      resizeMode: \"cover\",\n      style: styles.loginBg,\n      children: _jsxs(View, {\n        style: styles.Containter,\n        children: [_jsx(Text, {\n          style: styles.loginText,\n          children: \" customer login \"\n        }), _jsxs(View, {\n          style: styles.containerInner,\n          children: [_jsxs(View, {\n            style: styles.inputWidth,\n            children: [_jsx(Controller, {\n              control: control,\n              rules: {\n                maxLength: 100,\n                required: true\n              },\n              render: function render(_ref2) {\n                var _ref2$field = _ref2.field,\n                  onChange = _ref2$field.onChange,\n                  value = _ref2$field.value;\n                return _jsx(TextInput, {\n                  style: styles.loginInput,\n                  onChangeText: onChange,\n                  value: value,\n                  autoCorrect: false,\n                  label: \"Password / OTP\",\n                  returnKeyType: \"done\",\n                  secureTextEntry: passwordVisible,\n                  right: _jsx(Input.Icon, {\n                    name: passwordVisible ? \"eye\" : \"eye-off\",\n                    onPress: function onPress() {\n                      return setPasswordVisible(!passwordVisible);\n                    },\n                    color: \"#fff\",\n                    style: styles.inputIcon\n                  })\n                });\n              },\n              name: \"password\"\n            }), errors.password && _jsx(Text, {\n              style: styles.inputError,\n              children: \"This field is required.\"\n            })]\n          }), _jsxs(View, {\n            style: styles.checkboxPassword,\n            children: [_jsx(View, {\n              style: styles.checkboxInput\n            }), _jsx(TouchableOpacity, {\n              onPress: handleSubmit(onSubmit),\n              style: styles.forgotPassword,\n              children: _jsx(Title, {\n                style: styles.forgetLabel,\n                children: \"Forgot Password?\"\n              })\n            })]\n          }), _jsx(View, {\n            style: styles.LoginButtong,\n            children: _jsx(TouchableOpacity, {\n              onPress: handleSubmit(onSubmit),\n              style: styles.buttonStyle,\n              children: _jsx(Title, {\n                style: styles.LoginButtongTittle,\n                children: \"Submit\"\n              })\n            })\n          }), _jsx(View, {\n            children: _jsx(TouchableOpacity, {\n              onPress: handleSubmit(onSubmit),\n              children: _jsx(Title, {\n                style: styles.creatAccount,\n                children: \"Create New Account\"\n              })\n            })\n          })]\n        })]\n      })\n    })\n  });\n};\nexport default PasswordScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","useEffect","Controller","useForm","TextInput","useDispatch","useSelector","loginActions","TouchableOpacity","Input","Title","Checkbox","useStyles","PasswordScreen","navigation","styles","isChecked","setChecked","dispatch","logindata","state","userData","user","isLoggedIn","login","setLogin","passwordVisible","setPasswordVisible","reset","index","routes","name","defaultValues","password","control","handleSubmit","errors","formState","onSubmit","data","map","item","console","log","email","loginform","rootContainter","require","loginBg","Containter","loginText","containerInner","inputWidth","maxLength","required","field","onChange","value","loginInput","inputIcon","inputError","checkboxPassword","checkboxInput","forgotPassword","forgetLabel","LoginButtong","buttonStyle","LoginButtongTittle","creatAccount","StyleSheet","create"],"sources":["D:/gitProject/craggy_cosmatics/src/screens/PasswordScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, Button, ImageBackground } from 'react-native';\nimport { Controller, useForm } from 'react-hook-form';\nimport TextInput from '../components/InputHook';\nimport { useDispatch, useSelector, } from 'react-redux';\nimport { loginActions } from '../store/UserSlice';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { TextInput as Input, Title } from 'react-native-paper';\nimport Checkbox from 'expo-checkbox';\nimport { useStyles } from '../styles/responsiveStyle';\n\nconst PasswordScreen = ({ navigation }) => {\n    const styles = useStyles()\n    const [isChecked, setChecked] = useState(false);\n    const dispatch = useDispatch();\n    const logindata = useSelector(state => state.userData.user);\n    const isLoggedIn = useSelector(state => state.userData.isLoggedIn);\n    // console.log(\"logged-in \", isLoggedIn)\n    const [login, setLogin] = useState(false)\n    const [passwordVisible, setPasswordVisible] = useState(true);\n    // login\n    useEffect(() => {\n        if (isLoggedIn == true) {\n            navigation.reset({\n                index: 0,\n                routes: [{ name: 'HomeScreen' }],\n            });\n            // console.log(\"first:\", isLoggedIn)\n            setLogin(true);\n\n        };\n    }, [login])\n\n    const { control, handleSubmit, reset, formState: { errors } } = useForm({\n        defaultValues: {\n            // email: '',\n            password: '',\n        }\n    })\n\n    const onSubmit = (data) => {\n        // console.log(\"dataaaaaaaaaaaaa\",data);\n        {\n            logindata.map((item) => {\n                console.log(\"data.email\", item.email, item.password);\n                if (data.password == item.password) {\n                    navigation.reset({\n                        index: 0,\n                        routes: [{ name: 'HomeScreen' }],\n                    });\n                }\n\n            })\n        }\n        dispatch(loginActions.loginform({ isLoggedIn: true }));\n        reset();\n    }\n\n    return (\n        <View style={styles.rootContainter}>\n            <ImageBackground source={require('../../assets/images/login-bg.jpg')} resizeMode=\"cover\" style={styles.loginBg}>\n\n                <View style={styles.Containter}>\n                    <Text style={styles.loginText}> customer login </Text>\n                    <View style={styles.containerInner}>\n                        <View style={styles.inputWidth}>\n                            {/* <Controller\n                                control={control}\n                                rules={{\n                                    required: true,\n                                }}\n                                render={({ field: { onChange, onBlur, value } }) => (\n                                    <TextInput\n                                        style={styles.loginInput}\n                                        onChangeText={onChange}\n                                        value={value}\n                                        label=\"Email / Phone number\"\n                                        returnKeyType=\"next\"\n                                        autoCapitalize=\"none\"\n                                        autoCompleteType=\"email\"\n                                        textContentType=\"emailAddress\"\n                                        keyboardType=\"email-address\"\n                                    />\n                                )}\n                                name=\"email\"\n                            />\n                            {errors.email && <Text style={styles.inputError}>This field is required.</Text>} */}\n\n                            <Controller\n                                control={control}\n                                rules={{\n                                    maxLength: 100,\n                                    required: true,\n                                }}\n                                render={({ field: { onChange, value } }) => (\n                                    <TextInput\n                                        style={styles.loginInput}\n                                        onChangeText={onChange}\n                                        value={value}\n                                        autoCorrect={false}\n                                        label=\"Password / OTP\"\n                                        returnKeyType=\"done\"\n                                        secureTextEntry={passwordVisible}\n                                        right={<Input.Icon name={passwordVisible ? \"eye\" : \"eye-off\"} onPress={() => setPasswordVisible(!passwordVisible)} color=\"#fff\" style={styles.inputIcon} />}\n\n                                    />\n                                )}\n                                name=\"password\"\n                            />\n                            {errors.password && <Text style={styles.inputError}>This field is required.</Text>}\n                        </View>\n                        <View style={styles.checkboxPassword}>\n                            <View style={styles.checkboxInput}>\n                                {/* <Checkbox\n                                    style={styles.checkboxField}\n                                    uncheckedColor=\"#fff\"\n                                    value={isChecked}\n                                    onValueChange={setChecked}\n                                    color={isChecked ? '#cc933b' : '#fff'}\n                                />\n                                <Text style={styles.checkboxLabel}>Remember me</Text> */}\n                            </View>\n                            <TouchableOpacity onPress={handleSubmit(onSubmit)} style={styles.forgotPassword}>\n                                <Title style={styles.forgetLabel}>Forgot Password?</Title>\n                            </TouchableOpacity>\n                        </View>\n                        <View style={styles.LoginButtong}>\n                            <TouchableOpacity onPress={handleSubmit(onSubmit)} style={styles.buttonStyle}>\n                                <Title style={styles.LoginButtongTittle}>Submit</Title>\n                            </TouchableOpacity>\n                        </View>\n                        <View>\n                            <TouchableOpacity onPress={handleSubmit(onSubmit)}><Title style={styles.creatAccount}>Create New Account</Title></TouchableOpacity>\n                        </View>\n                    </View>\n                </View>\n            </ImageBackground>\n        </View>\n    )\n}\n\nexport default PasswordScreen;\n\nconst styles = StyleSheet.create({})"],"mappings":"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"},"metadata":{},"sourceType":"module"}