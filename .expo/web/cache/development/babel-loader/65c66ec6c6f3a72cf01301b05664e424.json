{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Controller, useForm } from 'react-hook-form';\nimport TextInput from \"../components/InputHook\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginActions } from \"../store/UserSlice\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { TextInput as Input, Title } from 'react-native-paper';\nimport axios from 'axios';\nimport { useStyles } from \"../styles/responsiveStyle\";\nimport BackButton from \"../components/BackButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var styles = useStyles();\n  var dispatch = useDispatch();\n  var logindata = useSelector(function (state) {\n    return state.userData.user;\n  });\n  var isLoggedIn = useSelector(function (state) {\n    return state.userData.isLoggedIn;\n  });\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    login = _useState2[0],\n    setLogin = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    passwordVisible = _useState4[0],\n    setPasswordVisible = _useState4[1];\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    reset = _useForm.reset,\n    errors = _useForm.formState.errors;\n  useEffect(function () {\n    if (isLoggedIn == true) {\n      navigation.reset({\n        index: 0,\n        routes: [{\n          name: 'HomeScreen'\n        }]\n      });\n      setLogin(true);\n    }\n    ;\n  }, [login]);\n  var onSubmit = function onSubmit(data) {\n    axios({\n      method: 'post',\n      url: 'https://craggycosmetic.com/api/user/login/',\n      data: {\n        username: data.userName,\n        password: data.password\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'consumer_key': '3b137de2b677819b965ddb7288bd73f62fc6c1f04a190678ca6e72fca3986629'\n      }\n    }).then(function (response) {\n      if (response.data.login == true) {\n        dispatch(loginActions.userlogin({\n          user_data: response.data.user_data\n        }));\n        dispatch(loginActions.loginform({\n          isLoggedIn: true\n        }));\n        navigation.reset({\n          index: 0,\n          routes: [{\n            name: 'HomeScreen'\n          }]\n        });\n      }\n    });\n  };\n  var forgetHandler = function forgetHandler() {\n    navigation.navigate('forgetPassword');\n  };\n  return _jsx(View, {\n    style: styles.rootContainter,\n    children: _jsxs(ImageBackground, {\n      source: require(\"../../assets/images/login-bg.jpg\"),\n      resizeMode: \"cover\",\n      style: styles.loginBg,\n      children: [_jsx(BackButton, {\n        goBack: navigation.goBack\n      }), _jsx(Image, {\n        source: require(\"../../assets/images/logo-image.jpg\"),\n        style: styles.logoBackground\n      }), _jsxs(View, {\n        style: styles.Containterlogin,\n        children: [_jsxs(View, {\n          style: styles.inputWidth,\n          children: [_jsx(Controller, {\n            control: control,\n            rules: {\n              required: true\n            },\n            render: function render(_ref2) {\n              var _ref2$field = _ref2.field,\n                onChange = _ref2$field.onChange,\n                value = _ref2$field.value;\n              return _jsx(TextInput, {\n                style: styles.loginInput,\n                onChangeText: onChange,\n                value: value,\n                label: \"Email / Phone\",\n                returnKeyType: \"next\",\n                autoCapitalize: \"none\",\n                autoCompleteType: \"email\",\n                textContentType: \"emailAddress\",\n                keyboardType: \"email-address\"\n              });\n            },\n            name: \"userName\"\n          }), errors.userName && _jsx(Text, {\n            style: styles.inputError,\n            children: \"This field is required.\"\n          }), _jsx(Controller, {\n            control: control,\n            rules: {\n              maxLength: 100,\n              required: true\n            },\n            render: function render(_ref3) {\n              var _ref3$field = _ref3.field,\n                onChange = _ref3$field.onChange,\n                value = _ref3$field.value;\n              return _jsx(TextInput, {\n                style: styles.loginInput,\n                onChangeText: onChange,\n                value: value,\n                autoCorrect: false,\n                label: \"Password\",\n                returnKeyType: \"done\",\n                secureTextEntry: passwordVisible,\n                right: _jsx(Input.Icon, {\n                  name: passwordVisible ? \"eye\" : \"eye-off\",\n                  onPress: function onPress() {\n                    return setPasswordVisible(!passwordVisible);\n                  },\n                  color: \"#222\",\n                  style: styles.inputIcon\n                })\n              });\n            },\n            name: \"password\"\n          }), errors.password && _jsx(Text, {\n            style: styles.inputError,\n            children: \"This field is required.\"\n          })]\n        }), _jsx(View, {\n          style: styles.checkboxPassword,\n          children: _jsx(TouchableOpacity, {\n            onPress: forgetHandler,\n            style: styles.forgotPassword,\n            children: _jsx(Title, {\n              style: styles.forgetLabel,\n              children: \"Forgot Password?\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.LoginButtong,\n          children: _jsx(TouchableOpacity, {\n            onPress: handleSubmit(onSubmit),\n            style: styles.buttonStyle,\n            children: _jsx(Title, {\n              style: styles.LoginButtongTittle,\n              children: \"Login\"\n            })\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.loginBottom,\n        children: [_jsx(Text, {\n          style: styles.needHelpBottom,\n          children: \"Don't have an account ?\"\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"signup\");\n          },\n          children: _jsx(Text, {\n            style: styles.contactUsBottom,\n            children: \" SignUp\"\n          })\n        })]\n      })]\n    })\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","useEffect","Controller","useForm","TextInput","useDispatch","useSelector","loginActions","TouchableOpacity","Input","Title","axios","useStyles","BackButton","LoginScreen","navigation","styles","dispatch","logindata","state","userData","user","isLoggedIn","login","setLogin","passwordVisible","setPasswordVisible","control","handleSubmit","reset","errors","formState","index","routes","name","onSubmit","data","method","url","username","userName","password","headers","then","response","userlogin","user_data","loginform","forgetHandler","navigate","rootContainter","require","loginBg","goBack","logoBackground","Containterlogin","inputWidth","required","field","onChange","value","loginInput","inputError","maxLength","inputIcon","checkboxPassword","forgotPassword","forgetLabel","LoginButtong","buttonStyle","LoginButtongTittle","loginBottom","needHelpBottom","contactUsBottom"],"sources":["D:/gitProject/craggy_cosmatics/src/screens/LoginScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, Button, ImageBackground, Image } from 'react-native';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport TextInput from '../components/InputHook';\r\nimport { useDispatch, useSelector, } from 'react-redux';\r\nimport { loginActions } from '../store/UserSlice';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { TextInput as Input, Title } from 'react-native-paper';\r\nimport axios from 'axios';\r\nimport { useStyles } from '../styles/responsiveStyle';\r\nimport BackButton from '../components/BackButton';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n    const styles = useStyles()\r\n    const dispatch = useDispatch();\r\n    const logindata = useSelector(state => state.userData.user);\r\n    const isLoggedIn = useSelector(state => state.userData.isLoggedIn);\r\n    const [login, setLogin] = useState(false)\r\n    const [passwordVisible, setPasswordVisible] = useState(true);\r\n    // const [userData, setUserData] = useState({});\r\n    // console.log(\"hjshssd\", userData)\r\n    const { control, handleSubmit, reset, formState: { errors } } = useForm()\r\n\r\n    // login\r\n    useEffect(() => {\r\n        if (isLoggedIn == true) {\r\n            navigation.reset({\r\n                index: 0,\r\n                routes: [{ name: 'HomeScreen' }],\r\n            });\r\n            setLogin(true);\r\n        };\r\n    }, [login])\r\n\r\n    const onSubmit = (data) => {\r\n        axios({\r\n            method: 'post',\r\n            url: 'https://craggycosmetic.com/api/user/login/',\r\n            data: {\r\n                username: data.userName,\r\n                password: data.password\r\n            },\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'consumer_key': '3b137de2b677819b965ddb7288bd73f62fc6c1f04a190678ca6e72fca3986629'\r\n            }\r\n        }).then((response) => {\r\n            if (response.data.login == true) {\r\n                dispatch(loginActions.userlogin({ user_data: response.data.user_data }));\r\n                dispatch(loginActions.loginform({ isLoggedIn: true }));\r\n                navigation.reset({\r\n                    index: 0,\r\n                    routes: [{ name: 'HomeScreen' }],\r\n                });\r\n            }\r\n        })\r\n        // alert(\"You Are SuccessFully Registered\");\r\n        // reset();\r\n    }\r\n    const forgetHandler = () => {\r\n        navigation.navigate('forgetPassword')\r\n    }\r\n\r\n    return (\r\n        <View style={styles.rootContainter}>\r\n            <ImageBackground source={require('../../assets/images/login-bg.jpg')} resizeMode=\"cover\" style={styles.loginBg}>\r\n                <BackButton goBack={navigation.goBack} />\r\n                <Image source={require('../../assets/images/logo-image.jpg')} style={styles.logoBackground} />\r\n                <View style={styles.Containterlogin}>\r\n                    <View style={styles.inputWidth}>\r\n                        <Controller\r\n                            control={control}\r\n                            rules={{\r\n                                required: true,\r\n                            }}\r\n                            render={({ field: { onChange, value } }) => (\r\n                                <TextInput\r\n                                    style={styles.loginInput}\r\n                                    onChangeText={onChange}\r\n                                    value={value}\r\n                                    label=\"Email / Phone\"\r\n                                    returnKeyType=\"next\"\r\n                                    autoCapitalize=\"none\"\r\n                                    autoCompleteType=\"email\"\r\n                                    textContentType=\"emailAddress\"\r\n                                    keyboardType=\"email-address\"\r\n                                />\r\n                            )}\r\n                            name=\"userName\"\r\n                        />\r\n                        {errors.userName && <Text style={styles.inputError}>This field is required.</Text>}\r\n\r\n                        <Controller\r\n                            control={control}\r\n                            rules={{\r\n                                maxLength: 100,\r\n                                required: true,\r\n                            }}\r\n                            render={({ field: { onChange, value } }) => (\r\n                                <TextInput\r\n                                    style={styles.loginInput}\r\n                                    onChangeText={onChange}\r\n                                    value={value}\r\n                                    autoCorrect={false}\r\n                                    label=\"Password\"\r\n                                    returnKeyType=\"done\"\r\n                                    secureTextEntry={passwordVisible}\r\n                                    right={<Input.Icon name={passwordVisible ? \"eye\" : \"eye-off\"} onPress={() => setPasswordVisible(!passwordVisible)} color=\"#222\" style={styles.inputIcon} />}\r\n                                />\r\n                            )}\r\n                            name=\"password\"\r\n                        />\r\n                        {errors.password && <Text style={styles.inputError}>This field is required.</Text>}\r\n                    </View>\r\n                    <View style={styles.checkboxPassword}>\r\n                        {/* <View style={styles.checkboxInput}>\r\n                            <Checkbox\r\n                                style={styles.checkboxField}\r\n                                uncheckedColor=\"#222\"\r\n                                value={isChecked}\r\n                                onValueChange={setChecked}\r\n                                color={isChecked ? '#cc933b' : '#222'}\r\n                            />\r\n                            <Text style={styles.checkboxLabel}>Remember me</Text>\r\n                        </View> */}\r\n                        <TouchableOpacity onPress={forgetHandler} style={styles.forgotPassword}>\r\n                            <Title style={styles.forgetLabel}>Forgot Password?</Title>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                    <View style={styles.LoginButtong}>\r\n                        <TouchableOpacity onPress={handleSubmit(onSubmit)} style={styles.buttonStyle}>\r\n                            <Title style={styles.LoginButtongTittle}>Login</Title>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n                <View style={styles.loginBottom}>\r\n                    <Text style={styles.needHelpBottom}>Don't have an account ?</Text>\r\n                    <TouchableOpacity onPress={() => navigation.navigate(\"signup\")}>\r\n                        <Text style={styles.contactUsBottom}> SignUp</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </ImageBackground>\r\n        </View>\r\n    )\r\n}\r\nexport default LoginScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,UAAU,EAAEC,OAAO,QAAQ,iBAAiB;AACrD,OAAOC,SAAS;AAChB,SAASC,WAAW,EAAEC,WAAW,QAAS,aAAa;AACvD,SAASC,YAAY;AACrB,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASJ,SAAS,IAAIK,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS;AAClB,OAAOC,UAAU;AAAiC;AAAA;AAElD,IAAMC,WAAW,GAAG,SAAdA,WAAW,OAAuB;EAAA,IAAjBC,UAAU,QAAVA,UAAU;EAC7B,IAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,IAAMK,QAAQ,GAAGZ,WAAW,EAAE;EAC9B,IAAMa,SAAS,GAAGZ,WAAW,CAAC,UAAAa,KAAK;IAAA,OAAIA,KAAK,CAACC,QAAQ,CAACC,IAAI;EAAA,EAAC;EAC3D,IAAMC,UAAU,GAAGhB,WAAW,CAAC,UAAAa,KAAK;IAAA,OAAIA,KAAK,CAACC,QAAQ,CAACE,UAAU;EAAA,EAAC;EAClE,gBAA0BtB,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAlCuB,KAAK;IAAEC,QAAQ;EACtB,iBAA8CxB,QAAQ,CAAC,IAAI,CAAC;IAAA;IAArDyB,eAAe;IAAEC,kBAAkB;EAG1C,eAAgEvB,OAAO,EAAE;IAAjEwB,OAAO,YAAPA,OAAO;IAAEC,YAAY,YAAZA,YAAY;IAAEC,KAAK,YAALA,KAAK;IAAeC,MAAM,YAAnBC,SAAS,CAAID,MAAM;EAGzD7B,SAAS,CAAC,YAAM;IACZ,IAAIqB,UAAU,IAAI,IAAI,EAAE;MACpBP,UAAU,CAACc,KAAK,CAAC;QACbG,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAa,CAAC;MACnC,CAAC,CAAC;MACFV,QAAQ,CAAC,IAAI,CAAC;IAClB;IAAC;EACL,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAEX,IAAMY,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,IAAI,EAAK;IACvBzB,KAAK,CAAC;MACF0B,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,4CAA4C;MACjDF,IAAI,EAAE;QACFG,QAAQ,EAAEH,IAAI,CAACI,QAAQ;QACvBC,QAAQ,EAAEL,IAAI,CAACK;MACnB,CAAC;MACDC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,QAAQ,EAAK;MAClB,IAAIA,QAAQ,CAACR,IAAI,CAACb,KAAK,IAAI,IAAI,EAAE;QAC7BN,QAAQ,CAACV,YAAY,CAACsC,SAAS,CAAC;UAAEC,SAAS,EAAEF,QAAQ,CAACR,IAAI,CAACU;QAAU,CAAC,CAAC,CAAC;QACxE7B,QAAQ,CAACV,YAAY,CAACwC,SAAS,CAAC;UAAEzB,UAAU,EAAE;QAAK,CAAC,CAAC,CAAC;QACtDP,UAAU,CAACc,KAAK,CAAC;UACbG,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAa,CAAC;QACnC,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EAGN,CAAC;EACD,IAAMc,aAAa,GAAG,SAAhBA,aAAa,GAAS;IACxBjC,UAAU,CAACkC,QAAQ,CAAC,gBAAgB,CAAC;EACzC,CAAC;EAED,OACI,KAAC,IAAI;IAAC,KAAK,EAAEjC,MAAM,CAACkC,cAAe;IAAA,UAC/B,MAAC,eAAe;MAAC,MAAM,EAAEC,OAAO,oCAAqC;MAAC,UAAU,EAAC,OAAO;MAAC,KAAK,EAAEnC,MAAM,CAACoC,OAAQ;MAAA,WAC3G,KAAC,UAAU;QAAC,MAAM,EAAErC,UAAU,CAACsC;MAAO,EAAG,EACzC,KAAC,KAAK;QAAC,MAAM,EAAEF,OAAO,sCAAuC;QAAC,KAAK,EAAEnC,MAAM,CAACsC;MAAe,EAAG,EAC9F,MAAC,IAAI;QAAC,KAAK,EAAEtC,MAAM,CAACuC,eAAgB;QAAA,WAChC,MAAC,IAAI;UAAC,KAAK,EAAEvC,MAAM,CAACwC,UAAW;UAAA,WAC3B,KAAC,UAAU;YACP,OAAO,EAAE7B,OAAQ;YACjB,KAAK,EAAE;cACH8B,QAAQ,EAAE;YACd,CAAE;YACF,MAAM,EAAE;cAAA,wBAAGC,KAAK;gBAAIC,QAAQ,eAARA,QAAQ;gBAAEC,KAAK,eAALA,KAAK;cAAA,OAC/B,KAAC,SAAS;gBACN,KAAK,EAAE5C,MAAM,CAAC6C,UAAW;gBACzB,YAAY,EAAEF,QAAS;gBACvB,KAAK,EAAEC,KAAM;gBACb,KAAK,EAAC,eAAe;gBACrB,aAAa,EAAC,MAAM;gBACpB,cAAc,EAAC,MAAM;gBACrB,gBAAgB,EAAC,OAAO;gBACxB,eAAe,EAAC,cAAc;gBAC9B,YAAY,EAAC;cAAe,EAC9B;YAAA,CACJ;YACF,IAAI,EAAC;UAAU,EACjB,EACD9B,MAAM,CAACU,QAAQ,IAAI,KAAC,IAAI;YAAC,KAAK,EAAExB,MAAM,CAAC8C,UAAW;YAAA,UAAC;UAAuB,EAAO,EAElF,KAAC,UAAU;YACP,OAAO,EAAEnC,OAAQ;YACjB,KAAK,EAAE;cACHoC,SAAS,EAAE,GAAG;cACdN,QAAQ,EAAE;YACd,CAAE;YACF,MAAM,EAAE;cAAA,wBAAGC,KAAK;gBAAIC,QAAQ,eAARA,QAAQ;gBAAEC,KAAK,eAALA,KAAK;cAAA,OAC/B,KAAC,SAAS;gBACN,KAAK,EAAE5C,MAAM,CAAC6C,UAAW;gBACzB,YAAY,EAAEF,QAAS;gBACvB,KAAK,EAAEC,KAAM;gBACb,WAAW,EAAE,KAAM;gBACnB,KAAK,EAAC,UAAU;gBAChB,aAAa,EAAC,MAAM;gBACpB,eAAe,EAAEnC,eAAgB;gBACjC,KAAK,EAAE,KAAC,KAAK,CAAC,IAAI;kBAAC,IAAI,EAAEA,eAAe,GAAG,KAAK,GAAG,SAAU;kBAAC,OAAO,EAAE;oBAAA,OAAMC,kBAAkB,CAAC,CAACD,eAAe,CAAC;kBAAA,CAAC;kBAAC,KAAK,EAAC,MAAM;kBAAC,KAAK,EAAET,MAAM,CAACgD;gBAAU;cAAI,EAC9J;YAAA,CACJ;YACF,IAAI,EAAC;UAAU,EACjB,EACDlC,MAAM,CAACW,QAAQ,IAAI,KAAC,IAAI;YAAC,KAAK,EAAEzB,MAAM,CAAC8C,UAAW;YAAA,UAAC;UAAuB,EAAO;QAAA,EAC/E,EACP,KAAC,IAAI;UAAC,KAAK,EAAE9C,MAAM,CAACiD,gBAAiB;UAAA,UAWjC,KAAC,gBAAgB;YAAC,OAAO,EAAEjB,aAAc;YAAC,KAAK,EAAEhC,MAAM,CAACkD,cAAe;YAAA,UACnE,KAAC,KAAK;cAAC,KAAK,EAAElD,MAAM,CAACmD,WAAY;cAAA,UAAC;YAAgB;UAAQ;QAC3C,EAChB,EACP,KAAC,IAAI;UAAC,KAAK,EAAEnD,MAAM,CAACoD,YAAa;UAAA,UAC7B,KAAC,gBAAgB;YAAC,OAAO,EAAExC,YAAY,CAACO,QAAQ,CAAE;YAAC,KAAK,EAAEnB,MAAM,CAACqD,WAAY;YAAA,UACzE,KAAC,KAAK;cAAC,KAAK,EAAErD,MAAM,CAACsD,kBAAmB;cAAA,UAAC;YAAK;UAAQ;QACvC,EAChB;MAAA,EACJ,EACP,MAAC,IAAI;QAAC,KAAK,EAAEtD,MAAM,CAACuD,WAAY;QAAA,WAC5B,KAAC,IAAI;UAAC,KAAK,EAAEvD,MAAM,CAACwD,cAAe;UAAA,UAAC;QAAuB,EAAO,EAClE,KAAC,gBAAgB;UAAC,OAAO,EAAE;YAAA,OAAMzD,UAAU,CAACkC,QAAQ,CAAC,QAAQ,CAAC;UAAA,CAAC;UAAA,UAC3D,KAAC,IAAI;YAAC,KAAK,EAAEjC,MAAM,CAACyD,eAAgB;YAAA,UAAC;UAAO;QAAO,EACpC;MAAA,EAChB;IAAA;EACO,EACf;AAEf,CAAC;AACD,eAAe3D,WAAW"},"metadata":{},"sourceType":"module"}