{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport MaterialTopTabView from \"../views/MaterialTopTabView\";\nfunction MaterialTopTabNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var swipeEnabled = restWithDeprecated.swipeEnabled,\n    lazy = restWithDeprecated.lazy,\n    lazyPlaceholder = restWithDeprecated.lazyPlaceholder,\n    lazyPreloadDistance = restWithDeprecated.lazyPreloadDistance,\n    tabBarOptions = restWithDeprecated.tabBarOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, \"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.\");\n  }\n  var deprecatedProps = {\n    swipeEnabled: swipeEnabled,\n    lazy: lazy,\n    lazyPlaceholder: lazyPlaceholder,\n    lazyPreloadDistance: lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      propName = _ref3[0],\n      propValue = _ref3[1];\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      warnOnce(true, \"Material Top Tab Navigator: '\" + propName + \"' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#\" + propName.toLowerCase() + \" for more details.\");\n    }\n  });\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(MaterialTopTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nexport default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","MaterialTopTabView","MaterialTopTabNavigator","id","_ref","initialRouteName","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarPressColor","pressColor","tabBarPressOpacity","pressOpacity","tabBarShowLabel","showLabel","tabBarShowIcon","showIcon","tabBarAllowFontScaling","allowFontScaling","tabBarBounces","bounces","tabBarScrollEnabled","scrollEnabled","tabBarIconStyle","iconStyle","tabBarLabelStyle","labelStyle","tabBarItemStyle","tabStyle","tabBarBadge","renderBadge","tabBarIndicator","renderIndicator","tabBarIndicatorStyle","indicatorStyle","tabBarIndicatorContainerStyle","indicatorContainerStyle","tabBarContentContainerStyle","contentContainerStyle","tabBarStyle","style","keys","forEach","key","undefined","JSON","stringify","deprecatedProps","entries","_ref2","propName","propValue","toLowerCase","state","descriptors","navigation","NavigationContent"],"sourceRoot":"../../src","sources":["createMaterialTopTabNavigator.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}