{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Controller, useForm } from 'react-hook-form';\nimport { loginActions } from \"../store/UserSlice\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport TextInput from \"../components/AccountInputHook\";\nimport { useRoute } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EditAddress = function EditAddress(_ref) {\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var index = route.params;\n  var userAdd = useSelector(function (state) {\n    return state.userData.userAddress;\n  });\n  var dispatch = useDispatch();\n  var _useForm = useForm({}),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    reset = _useForm.reset,\n    errors = _useForm.formState.errors;\n  useEffect(function () {\n    {\n      userAdd.map(function (v, i) {\n        reset({\n          firstname: v.firstname,\n          Lastname: v.Lastname,\n          flate: v.flate,\n          Apartment: v.Apartment,\n          State: v.State,\n          City: v.City,\n          Pincode: v.Pincode,\n          phone: v.phone\n        });\n      });\n    }\n  }, []);\n  var onSubmit = function onSubmit(data) {\n    var AddData = [{\n      index: index,\n      firstname: data.firstname,\n      Lastname: data.Lastname,\n      flate: data.flate,\n      Apartment: data.Apartment,\n      State: data.State,\n      City: data.City,\n      Pincode: data.Pincode,\n      phone: data.phone\n    }];\n    dispatch(loginActions.useraddress({\n      userAddress: AddData\n    }));\n    navigation.goBack();\n  };\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.root_container,\n      children: _jsx(ScrollView, {\n        children: userAdd.map(function (v, i) {\n          return _jsxs(View, {\n            children: [_jsxs(View, {\n              style: {\n                flexDirection: 'row',\n                justifyContent: 'space-around'\n              },\n              children: [_jsxs(View, {\n                style: {\n                  width: '45%'\n                },\n                children: [_jsx(Controller, {\n                  control: control,\n                  rules: {\n                    required: true,\n                    pattern: {\n                      value: /^[a-zA-Z ]{2,40}$/\n                    }\n                  },\n                  render: function render(_ref2) {\n                    var _ref2$field = _ref2.field,\n                      onChange = _ref2$field.onChange,\n                      value = _ref2$field.value;\n                    return _jsx(TextInput, {\n                      onChangeText: onChange,\n                      value: value,\n                      label: \"First Name\",\n                      returnKeyType: \"next\",\n                      autoCapitalize: \"none\",\n                      autoCompleteType: \"firstname\",\n                      keyboardType: \"text\",\n                      style: styles.firstname_text\n                    });\n                  },\n                  name: \"firstname\"\n                }), errors.firstname && errors.firstname.type === 'required' && _jsx(Text, {\n                  children: \" this is required !\"\n                }), errors.firstname && errors.firstname.type === 'pattern' && _jsx(Text, {\n                  children: \" please enter correct !\"\n                })]\n              }), _jsxs(View, {\n                style: {\n                  width: '45%'\n                },\n                children: [_jsx(Controller, {\n                  control: control,\n                  rules: {\n                    required: true,\n                    pattern: {\n                      value: /^[a-zA-Z ]{2,40}$/\n                    }\n                  },\n                  render: function render(_ref3) {\n                    var _ref3$field = _ref3.field,\n                      onChange = _ref3$field.onChange,\n                      value = _ref3$field.value;\n                    return _jsx(TextInput, {\n                      onChangeText: onChange,\n                      value: value,\n                      label: \"Last Name\",\n                      returnKeyType: \"next\",\n                      autoCapitalize: \"none\",\n                      autoCompleteType: \"Lastname\",\n                      textContentType: \"Lastname\",\n                      keyboardType: \"text\",\n                      style: styles.firstname_text\n                    });\n                  },\n                  name: \"Lastname\"\n                }), errors.Lastname && errors.Lastname.type === 'required' && _jsx(Text, {\n                  children: \" this is required !\"\n                }), errors.Lastname && errors.Lastname.type === 'pattern' && _jsx(Text, {\n                  children: \" please enter correct !\"\n                })]\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[0-9]{10,10}$/\n                  }\n                },\n                Pincode: true,\n                render: function render(_ref4) {\n                  var _ref4$field = _ref4.field,\n                    onChange = _ref4$field.onChange,\n                    value = _ref4$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"Phone Number\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"phone\",\n                    keyboardType: \"numeric\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"phone\"\n              }), errors.phone && errors.phone.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.phone && errors.phone.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[a-zA-Z,0-9 ]{2,10}$/\n                  }\n                },\n                render: function render(_ref5) {\n                  var _ref5$field = _ref5.field,\n                    onChange = _ref5$field.onChange,\n                    value = _ref5$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"Flate/House Number\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"flate\",\n                    textContentType: \"flate\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"flate\"\n              }), errors.flate && errors.flate.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.flate && errors.flate.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[a-zA-Z ]{2,40}$/\n                  }\n                },\n                render: function render(_ref6) {\n                  var _ref6$field = _ref6.field,\n                    onChange = _ref6$field.onChange,\n                    value = _ref6$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"Apartment/Area/Locality/Road\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"Apartment\",\n                    textContentType: \"Apartment\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"Apartment\"\n              }), errors.Apartment && errors.Apartment.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.Apartment && errors.Apartment.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[0-9 ]{6,6}$/\n                  }\n                },\n                render: function render(_ref7) {\n                  var _ref7$field = _ref7.field,\n                    onChange = _ref7$field.onChange,\n                    value = _ref7$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"Pincode\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"Pincode\",\n                    keyboardType: \"numeric\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"Pincode\"\n              }), errors.Pincode && errors.Pincode.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.Pincode && errors.Pincode.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[a-zA-Z ]{2,40}$/\n                  }\n                },\n                render: function render(_ref8) {\n                  var _ref8$field = _ref8.field,\n                    onChange = _ref8$field.onChange,\n                    value = _ref8$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"State\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"State\",\n                    textContentType: \"State\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"State\"\n              }), errors.State && errors.State.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.State && errors.State.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            }), _jsxs(View, {\n              style: {\n                width: '95%',\n                alignSelf: 'center'\n              },\n              children: [_jsx(Controller, {\n                control: control,\n                rules: {\n                  required: true,\n                  pattern: {\n                    value: /^[a-zA-Z ]{2,40}$/\n                  }\n                },\n                render: function render(_ref9) {\n                  var _ref9$field = _ref9.field,\n                    onChange = _ref9$field.onChange,\n                    value = _ref9$field.value;\n                  return _jsx(TextInput, {\n                    onChangeText: onChange,\n                    value: value,\n                    label: \"City\",\n                    returnKeyType: \"next\",\n                    autoCapitalize: \"none\",\n                    autoCompleteType: \"City\",\n                    textContentType: \"City\",\n                    style: styles.firstname_text\n                  });\n                },\n                name: \"City\"\n              }), errors.City && errors.City.type === 'required' && _jsx(Text, {\n                children: \" this is required !\"\n              }), errors.City && errors.City.type === 'pattern' && _jsx(Text, {\n                children: \" please enter correct !\"\n              })]\n            })]\n          }, i);\n        })\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.btn_root,\n      onPress: handleSubmit(onSubmit),\n      children: _jsx(Text, {\n        style: styles.btn_text,\n        children: \"Update\"\n      })\n    })]\n  });\n};\nexport default EditAddress;\nvar styles = StyleSheet.create({\n  root_container: {\n    height: '88%',\n    width: '90%',\n    borderWidth: 0.5,\n    borderRadius: 15,\n    marginTop: 15,\n    alignSelf: 'center',\n    backgroundColor: '#fff'\n  },\n  btn_root: {\n    height: 45,\n    width: 200,\n    backgroundColor: 'black',\n    marginTop: 10,\n    borderRadius: 10,\n    alignSelf: 'center',\n    justifyContent: 'center'\n  },\n  btn_text: {\n    color: '#fff',\n    alignSelf: 'center',\n    fontSize: 16\n  },\n  firstname_text: {\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderBottomWidth: 0,\n    padding: 0\n  }\n});","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","Controller","useForm","loginActions","ScrollView","TextInput","useRoute","EditAddress","navigation","route","index","params","userAdd","state","userData","userAddress","dispatch","control","handleSubmit","reset","errors","formState","map","v","i","firstname","Lastname","flate","Apartment","State","City","Pincode","phone","onSubmit","data","AddData","useraddress","goBack","styles","root_container","flexDirection","justifyContent","width","required","pattern","value","field","onChange","firstname_text","type","alignSelf","btn_root","btn_text","StyleSheet","create","height","borderWidth","borderRadius","marginTop","backgroundColor","color","fontSize","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","padding"],"sources":["D:/gitProject/craggy_cosmatics/src/screens/EditAddress.js"],"sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity } from 'react-native'\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Controller, useForm } from 'react-hook-form'\r\nimport { loginActions } from '../store/UserSlice'\r\nimport { ScrollView } from 'react-native-gesture-handler'\r\nimport TextInput from '../components/AccountInputHook'\r\nimport { useRoute } from '@react-navigation/native'\r\n\r\n\r\nconst EditAddress = ({ navigation }) => {\r\n    const route = useRoute();\r\n    const index = route.params;\r\n    // console.log(\"iiiinnnnddddxxx\", index)\r\n    const userAdd = useSelector(state => state.userData.userAddress);\r\n    const dispatch = useDispatch();\r\n    // console.log(\"recieved\", userAdd)\r\n    const { control, handleSubmit, reset, formState: { errors } } = useForm({\r\n\r\n    })\r\n    useEffect(() => {\r\n        {\r\n            userAdd.map((v, i) => {\r\n                // console.log(\"vvvgggg\", v)\r\n                reset({\r\n                    firstname: v.firstname,\r\n                    Lastname: v.Lastname,\r\n                    flate: v.flate,\r\n                    Apartment: v.Apartment,\r\n                    State: v.State,\r\n                    City: v.City,\r\n                    Pincode: v.Pincode,\r\n                    phone: v.phone\r\n                })\r\n            })\r\n        }\r\n    }, [])\r\n    const onSubmit = data => {\r\n        // console.log(\"datatata\", data);\r\n        let AddData = [{\r\n            index: index,\r\n            firstname: data.firstname,\r\n            Lastname: data.Lastname,\r\n            flate: data.flate,\r\n            Apartment: data.Apartment,\r\n            State: data.State,\r\n            City: data.City,\r\n            Pincode: data.Pincode,\r\n            phone: data.phone\r\n        }];\r\n        // console.log(\"dddddd\", AddData)\r\n\r\n        dispatch(loginActions.useraddress(\r\n            {\r\n                userAddress: AddData\r\n            }\r\n        ));\r\n        navigation.goBack();\r\n        // navigation.navigate('Addresses')\r\n        // reset();\r\n    }\r\n    return (\r\n        <View>\r\n            <View style={styles.root_container}>\r\n                <ScrollView>\r\n                    {userAdd.map((v, i) => {\r\n                        return (\r\n\r\n                            <View key={i}>\r\n                                <View style={{ flexDirection: 'row', justifyContent: 'space-around' }}>\r\n                                    <View style={{ width: '45%' }}>\r\n                                        <Controller\r\n                                            control={control}\r\n                                            rules={{\r\n                                                required: true,\r\n                                                pattern: { value: /^[a-zA-Z ]{2,40}$/ }\r\n                                            }}\r\n                                            render={({ field: { onChange, value } }) => (\r\n                                                <TextInput\r\n                                                    onChangeText={onChange}\r\n                                                    value={value}\r\n                                                    label=\"First Name\"\r\n                                                    returnKeyType=\"next\"\r\n                                                    autoCapitalize=\"none\"\r\n                                                    autoCompleteType=\"firstname\"\r\n                                                    // textContentType=\"firstname\"\r\n                                                    keyboardType=\"text\"\r\n                                                    style={styles.firstname_text}\r\n                                                />\r\n                                            )}\r\n                                            name=\"firstname\"\r\n                                        />\r\n                                        {errors.firstname && errors.firstname.type === 'required' && <Text> this is required !</Text>}\r\n                                        {errors.firstname && errors.firstname.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                    </View>\r\n                                    <View style={{ width: '45%' }}>\r\n                                        <Controller\r\n                                            control={control}\r\n                                            rules={{\r\n                                                required: true,\r\n                                                pattern: { value: /^[a-zA-Z ]{2,40}$/ }\r\n                                            }}\r\n                                            render={({ field: { onChange, value } }) => (\r\n                                                <TextInput\r\n                                                    onChangeText={onChange}\r\n                                                    value={value}\r\n                                                    label=\"Last Name\"\r\n                                                    returnKeyType=\"next\"\r\n                                                    autoCapitalize=\"none\"\r\n                                                    autoCompleteType=\"Lastname\"\r\n                                                    textContentType=\"Lastname\"\r\n                                                    keyboardType=\"text\"\r\n                                                    // style={{ height: 40 }}\r\n                                                    style={styles.firstname_text}\r\n                                                />\r\n                                            )}\r\n                                            name=\"Lastname\"\r\n                                        />\r\n                                        {errors.Lastname && errors.Lastname.type === 'required' && <Text> this is required !</Text>}\r\n                                        {errors.Lastname && errors.Lastname.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[0-9]{10,10}$/ }\r\n                                        }} Pincode\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"Phone Number\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"phone\"\r\n                                                // textContentType=\"phone\"\r\n                                                keyboardType=\"numeric\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"phone\"\r\n                                    />\r\n                                    {errors.phone && errors.phone.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.phone && errors.phone.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[a-zA-Z,0-9 ]{2,10}$/ }\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"Flate/House Number\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"flate\"\r\n                                                textContentType=\"flate\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"flate\"\r\n                                    />\r\n                                    {errors.flate && errors.flate.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.flate && errors.flate.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[a-zA-Z ]{2,40}$/ }\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"Apartment/Area/Locality/Road\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"Apartment\"\r\n                                                textContentType=\"Apartment\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"Apartment\"\r\n                                    />\r\n                                    {errors.Apartment && errors.Apartment.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.Apartment && errors.Apartment.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[0-9 ]{6,6}$/ }\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"Pincode\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"Pincode\"\r\n                                                keyboardType=\"numeric\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"Pincode\"\r\n                                    />\r\n                                    {errors.Pincode && errors.Pincode.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.Pincode && errors.Pincode.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[a-zA-Z ]{2,40}$/ }\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"State\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"State\"\r\n                                                textContentType=\"State\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"State\"\r\n                                    />\r\n                                    {errors.State && errors.State.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.State && errors.State.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n\r\n                                <View style={{ width: '95%', alignSelf: 'center' }}>\r\n                                    <Controller\r\n                                        control={control}\r\n                                        rules={{\r\n                                            required: true,\r\n                                            pattern: { value: /^[a-zA-Z ]{2,40}$/ }\r\n                                        }}\r\n                                        render={({ field: { onChange, value } }) => (\r\n                                            <TextInput\r\n                                                onChangeText={onChange}\r\n                                                value={value}\r\n                                                label=\"City\"\r\n                                                returnKeyType=\"next\"\r\n                                                autoCapitalize=\"none\"\r\n                                                autoCompleteType=\"City\"\r\n                                                textContentType=\"City\"\r\n                                                // style={{ height: 40 }}\r\n                                                style={styles.firstname_text}\r\n                                            />\r\n                                        )}\r\n                                        name=\"City\"\r\n                                    />\r\n                                    {errors.City && errors.City.type === 'required' && <Text> this is required !</Text>}\r\n                                    {errors.City && errors.City.type === 'pattern' && <Text> please enter correct !</Text>}\r\n                                </View>\r\n                            </View>\r\n                        )\r\n                    })}\r\n                </ScrollView>\r\n            </View>\r\n\r\n            <TouchableOpacity style={styles.btn_root} onPress={handleSubmit(onSubmit)}>\r\n                <Text style={styles.btn_text}>Update</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\nexport default EditAddress\r\n\r\nconst styles = StyleSheet.create({\r\n    root_container: {\r\n        height: '88%',\r\n        width: '90%',\r\n        borderWidth: 0.5,\r\n        borderRadius: 15,\r\n        marginTop: 15,\r\n        alignSelf: 'center',\r\n        backgroundColor: '#fff'\r\n    },\r\n    btn_root: {\r\n        height: 45,\r\n        width: 200,\r\n        backgroundColor: 'black',\r\n        marginTop: 10,\r\n        borderRadius: 10,\r\n        alignSelf: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    btn_text: {\r\n        color: '#fff',\r\n        alignSelf: 'center',\r\n        fontSize: 16\r\n    },\r\n    firstname_text: {\r\n        // height: 40,\r\n        borderTopWidth: 0,\r\n        borderLeftWidth: 0,\r\n        borderRightWidth: 0,\r\n        borderBottomWidth: 0,\r\n        padding: 0,\r\n    }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}