{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tabBar\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { CommonActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var _ref$tabBar = _ref.tabBar,\n    tabBar = _ref$tabBar === void 0 ? function (props) {\n      return React.createElement(MaterialTopTabBar, props);\n    } : _ref$tabBar,\n    state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    sceneContainerStyle = _ref.sceneContainerStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread({}, props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  return React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate({\n        name: state.routes[index].name,\n        merge: true\n      })), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderLazyPlaceholder: function renderLazyPlaceholder(_ref3) {\n      var _ref5;\n      var _descriptors$route$ke, _descriptors$route$ke2;\n      var route = _ref3.route;\n      return (_ref5 = (_descriptors$route$ke = (_descriptors$route$ke2 = descriptors[route.key].options).lazyPlaceholder) === null || _descriptors$route$ke === void 0 ? void 0 : _descriptors$route$ke.call(_descriptors$route$ke2)) != null ? _ref5 : null;\n    },\n    lazy: function lazy(_ref4) {\n      var route = _ref4.route;\n      return descriptors[route.key].options.lazy === true;\n    },\n    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,\n    swipeEnabled: focusedOptions.swipeEnabled,\n    animationEnabled: focusedOptions.animationEnabled,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,aAAa,EAIbC,QAAQ,QACH,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAA6BC,OAAO,QAAQ,uBAAuB;AAQnE,OAAOC,iBAAiB;AAQxB,eAAe,SAASC,kBAAkB,OAOhC;EAAA,kBAAFC,KANNC,MAAM;IAANA,MAAM,4BAAIC,eAA6B;MAAA,OAAKN,oBAACE,iBAAiB,EAAKI,KAAK,CAAI;IAAA;IAC5EC,KAAK,GAKCH,KALNG,KAAK;IACLC,UAAU,GAIJJ,KAJNI,UAAU;IACVC,WAAW,GAGLL,KAHNK,WAAW;IACXC,mBAAmB,GAEbN,KAFNM,mBAAmB;IAChBC,gCACGP;EACN,gBAAmBL,QAAQ,EAAE;IAArBa;EAER,IAAMC,YAAY,GAAIP,SAAhBO,YAAY,CAAIP,KAAyB,EAAK;IAClD,OAAOD,MAAM,iCACRC,KAAK;MACRC,KAAK,EAAEA,KAAK;MACZC,UAAU,EAAEA,UAAU;MACtBC,WAAW,EAAEA;IAAAA,GACb;EACJ,CAAC;EAED,IAAMK,cAAc,GAAGL,WAAW,CAACF,KAAK,CAACQ,MAAM,CAACR,KAAK,CAACS,KAAK,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO;EAEzE,OACElB,oBAACC,OAAO,eACFU,IAAI;IACRQ,aAAa,EAAGH,4BAAK;MAAA,OACnBR,UAAU,CAACY,QAAQ,iCACdtB,aAAa,CAACuB,QAAQ,CAAC;QACxBC,IAAI,EAAEf,KAAK,CAACQ,MAAM,CAACC,KAAK,CAAC,CAACM,IAAI;QAC9BC,KAAK,EAAE;MACT,CAAC,CAAC;QACFC,MAAM,EAAEjB,KAAK,CAACU;MAAAA,GAEjB;IAAA;IACDQ,WAAW,EAAE;MAAA,IAAGC,QAAOC,MAAPD;MAAO,OAAKjB,WAAW,CAACiB,KAAK,CAACT,GAAG,CAAC,CAACW,MAAM,EAAE;IAAA,CAAC;IAC5DC,eAAe,EAAEtB,KAAM;IACvBM,YAAY,EAAEA,YAAa;IAC3BiB,qBAAqB,EAAE;MAAA;MAAA;MAAA,IAAGJ,QAAOK,MAAPL;MAAO,gBAC/B,8DAAW,CAACA,KAAK,CAACT,GAAG,CAAC,CAACC,OAAO,EAACc,eAAe,0DAA9CC,kDAAkD,oBAAI,IAAI;IAAA,CAC3D;IACDC,IAAI,EAAE;MAAA,IAAGR,QAAOS,MAAPT;MAAO,OAAKjB,WAAW,CAACiB,KAAK,CAACT,GAAG,CAAC,CAACC,OAAO,CAACgB,IAAI,KAAK,IAAI;IAAA,CAAC;IAClEE,mBAAmB,EAAEtB,cAAc,CAACsB,mBAAoB;IACxDC,YAAY,EAAEvB,cAAc,CAACuB,YAAa;IAC1CC,gBAAgB,EAAExB,cAAc,CAACwB,gBAAiB;IAClDC,YAAY,EAAE;MAAA,OAAM/B,UAAU,CAACgC,IAAI,CAAC;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAE;IAAA;IAC5DC,UAAU,EAAE;MAAA,OAAMlC,UAAU,CAACgC,IAAI,CAAC;QAAEC,IAAI,EAAE;MAAW,CAAC,CAAE;IAAA;IACxD/B,mBAAmB,EAAE,CACnB;MAAEiC,eAAe,EAAE/B,MAAM,CAACgC;IAAW,CAAC,EACtClC,mBAAmB;EACnB,GACF;AAEN","names":["CommonActions","useTheme","React","TabView","MaterialTopTabBar","MaterialTopTabView","_ref","tabBar","props","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","focusedOptions","routes","index","key","options","onIndexChange","dispatch","navigate","name","merge","target","renderScene","route","_ref2","render","navigationState","renderLazyPlaceholder","_ref3","lazyPlaceholder","_descriptors$route$ke","lazy","_ref4","lazyPreloadDistance","swipeEnabled","animationEnabled","onSwipeStart","emit","type","onSwipeEnd","backgroundColor","background"],"sourceRoot":"../../src","sources":["MaterialTopTabView.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}